# Use este Blueprint para implantar o n8n no Render como um serviço web
# que usa um banco de dados Postgres externo (Supabase) para armazenar
# dados de workflow.

services:
  - type: web
    plan: free
    # Este é o tempo de execução para serviços que puxam uma imagem Docker pré-construída
    runtime: image
    # Você pode dar qualquer nome ao serviço
    name: n8n-service
    image:
      # Puxa a imagem do n8n com a tag 'latest' do Docker Hub
      url: docker.io/n8nio/n8n:latest

    # Todas as variáveis de ambiente abaixo são necessárias!
    #
    # Você pode definir variáveis de ambiente adicionais conforme necessário.
    envVars:
      # Gera uma chave codificada em base64 para
      # criptografar credenciais no n8n.
      #
      # Use `generateValue: true` no Render ou forneça sua própria chave
      # forte (como uma string aleatória com mais de 32 caracteres).
      # Se você usar `generateValue: true`, o Render irá gerar uma para você.
      # Exemplo: - key: N8N_ENCRYPTION_KEY
      #          value: sua-chave-de-criptografia-aqui
      - key: N8N_ENCRYPTION_KEY
        generateValue: true

      # Variáveis de ambiente para conectar o n8n ao seu banco de dados PostgreSQL no Supabase.
      # Substitua os valores entre aspas pelas suas credenciais reais do Supabase.
      - key: DB_TYPE
        value: postgresdb
      - key: DB_POSTGRESDB_DATABASE
        value: "postgres" # Geralmente é 'postgres'
      - key: DB_POSTGRESDB_HOST
        value: "db.akqjvytmeqfhuirfzppq.supabase.co"
      - key: DB_POSTGRESDB_PASSWORD
        value: "Q4rLq2cUf#S5gu#"
      - key: DB_POSTGRESDB_USER
        value: "postgres" # Geralmente é 'postgres'
      - key: DB_POSTGRESDB_PORT
        value: "5432"

      # Defina a URL base do seu editor para que os webhooks funcionem corretamente.
      # Substitua o nome do serviço pelo nome que você escolheu no Render.
      - key: N8N_EDITOR_BASE_URL
        value: "https://nome-do-seu-servico.onrender.com/"
